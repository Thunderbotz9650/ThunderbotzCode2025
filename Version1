// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class SwerveDrive extends TimedRobot {

    // Xbox Controller for manual control
    private XboxController controller;

    // Swerve modules (one for each wheel)
    private SwerveDriveModule frontLeft, frontRight, backLeft, backRight;

    // Initialization method
    @Override
    public void robotInit() {
        // Initialize controller
        controller = new XboxController(0);

        // Initialize swerve modules with appropriate motor controllers
        frontLeft = new SwerveDriveModule(1, 2);  // (drive motor port, steering motor port)
        frontRight = new SwerveDriveModule(3, 4);
        backLeft = new SwerveDriveModule(5, 6);
        backRight = new SwerveDriveModule(7, 8);
    }

    // Periodic method runs every 20ms
    @Override
    public void teleopPeriodic() {
        double forward = -controller.getY();   // Get the forward/backward input
        double strafe = controller.getX();    // Get the strafe (sideways) input
        double rotation = controller.getRawAxis(4);  // Get the rotation input (twist)

        // Call method to update swerve module speeds and angles
        updateSwerveDrive(forward, strafe, rotation);
    }

    // Method to calculate wheel speeds and angles for swerve drive
    private void updateSwerveDrive(double forward, double strafe, double rotation) {
        // For simplicity, use a basic tank drive math for swerve (could be more complex based on kinematics)
        double flSpeed = forward + strafe - rotation;
        double frSpeed = forward - strafe + rotation;
        double blSpeed = forward - strafe - rotation;
        double brSpeed = forward + strafe + rotation;

        // Update each module with corresponding speed and angle
        frontLeft.setSpeedAndAngle(flSpeed, Math.atan2(strafe, forward));
        frontRight.setSpeedAndAngle(frSpeed, Math.atan2(strafe, forward));
        backLeft.setSpeedAndAngle(blSpeed, Math.atan2(strafe, forward));
        backRight.setSpeedAndAngle(brSpeed, Math.atan2(strafe, forward));

        // Display speed info on SmartDashboard
        SmartDashboard.putNumber("Front Left Speed", flSpeed);
        SmartDashboard.putNumber("Front Right Speed", frSpeed);
        SmartDashboard.putNumber("Back Left Speed", blSpeed);
        SmartDashboard.putNumber("Back Right Speed", brSpeed);
    }
}

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

//we added the imports below this comment
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.config.SparkMaxConfig;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkBase.ResetMode;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.Timer;

import edu.wpi.first.wpilibj.XboxController;
/**
 * The methods in this class are called automatically corresponding to each mode, as described in
 * the TimedRobot documentation. If you change the name of this class or the package after creating
 * this project, you must also update the Main.java file in the project.
 */
public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCenterCoral = "Center and Coral";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();

  private final SparkMax rollerMotor = new SparkMax(5, MotorType.kBrushed);

  private final SparkMax leftleader = new SparkMax(1,MotorType.kBrushed);
  private final SparkMax leftfollower = new SparkMax(2,MotorType.kBrushed);
  private final SparkMax rightleader = new SparkMax(3, MotorType.kBrushed);
  private final SparkMax rightfollower = new SparkMax(4,MotorType.kBrushed);

  private final DifferentialDrive DRIVER = new DifferentialDrive(leftleader, rightleader);

  private final SparkMaxConfig driveConfig = new SparkMaxConfig();
  private final SparkMaxConfig rollConfig = new SparkMaxConfig();

 private final Timer timer1 = new Timer();

private final double ROLLER_EJECT_VALUE = 0.44;
private double driveSpeed = 1;
private double rollerOut = 0;

private final XboxController x360 = new XboxController(0);

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  public Robot() {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("Center and Coral", kCenterCoral);
    SmartDashboard.putData("Auto choices", m_chooser);

driveConfig.smartCurrentLimit(60);
driveConfig.voltageCompensation(12);
 driveConfig.follow(leftleader);
leftfollower.configure(driveConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);


driveConfig.follow(rightleader);
rightfollower.configure(driveConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

driveConfig.disableFollowerMode();
rightleader.configure(driveConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

driveConfig.inverted(true);
leftleader.configure(driveConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

rollConfig.smartCurrentLimit(60);
rollConfig.voltageCompensation(10);
rollerMotor.configure(rollConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

timer1.start();
  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {}

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
    timer1.restart();
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCenterCoral:
        //Drive forwrd to the reef
        //stop and deposit the coral
        //stop everything
        if (timer1.get() < 3){
         //1:24.40 for driver code
        }
else if (timer1.get() < 3.85) {
  rollerMotor.set(ROLLER_EJECT_VALUE);
  
}
else if (timer1.get() <5.5)
// put DRIVER code here when we have it
        break;
  
      case kDefaultAuto:
      default:
      // put DRIVER code here when we have it
      else{
        rollerMotor.set(0);
      }
      break;
    }
  }

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {}

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {

  }

  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}
}
